[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
let g:precious_enable_switchers = {
  \	"vue" : {
  \		"setfiletype" : 0
  \	},
  \}
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # status line
repo = 'itchyny/lightline.vim'
depends_on = ['vim-fugitive', 'vista.nvim', 'coc.nvim']
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'iceberg',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \       [ 'gitbranch', 'readonly', 'filename','modified', 'method' ] ],
  \   'right': [
  \       [ 'lineinfo' ],
  \       [ 'percent' ],
  \       [ 'fileformat', 'fileencoding', 'filetype' ] ]
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction',
  \   'filename': 'LightlineFilename',
  \   'gitbranch': 'Fugitive',
  \   'method': 'NearestMethodOrFunction'
  \ }
  "\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  "\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
  \ }

function! LightlineFilename()
  let filename = expand('%') !=# '' ? expand('%') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! Fugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? ' '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

'''

[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends_on = 'vimproc.vim'
hook_add = '''
nmap <Leader>q :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'runner'  : 'vimproc',
  \ 'runner/vimproc/updatetime' : 60,
  \ 'outputter/buffer/split'  : ':rightbelow 18sp',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ 'hook/time/enable': 1
  \ }

" for bundler
let g:quickrun_config['minitest/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': 'ruby',
  \ 'exec': 'bundle exec %c %s'
  \}

nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
au FileType qf nnoremap <silent><buffer>q :quit<CR>

function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'minitest/bundle'}
endfunction
autocmd BufReadPost *_test.rb call RSpecQuickrun()
'''


[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
map <C-p> :VimShellPop<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
'''

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # ansible
repo = 'pearofducks/ansible-vim'
on_ft =  ['ansible', 'yaml', 'yml']

[[plugins]] # jinaj2
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = 'j2'

[[plugins]] # mustache
repo = 'juvenn/mustache.vim'
on_ft = 'mustache'

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
  set helplang=ja,en
'''

# Colors
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  if (has("termguicolors"))
   set termguicolors
  endif
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  au MyAutoCmd VimEnter * nested colorscheme iceberg
'''

# [[plugins]]
# repo = 'dracula/vim'
# hook_add = '''
#   if (has("termguicolors"))
#    set termguicolors
#   endif
#   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#   au MyAutoCmd VimEnter * nested colorscheme dracula
# '''

#[[plugins]]
#repo = 'jacoborus/tender.vim'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  au MyAutoCmd VimEnter * nested colorscheme tender
#'''

#[[plugins]]
#repo = 'morhetz/gruvbox'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  au MyAutoCmd VimEnter * nested colorscheme gruvbox
#'''
#[[plugins]]
#repo = 'rakr/vim-one'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme one
#'''

#[[plugins]]
#repo = 'ayu-theme/ayu-vim'
#hook_add = '''
#  set termguicolors
#  let ayucolor="mirage"
#  au MyAutoCmd VimEnter * nested colorscheme ayu
#'''

#[[plugins]]
#repo = 'sonph/onehalf'
#rtp = 'vim'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  au MyAutoCmd VimEnter * nested colorscheme onehalfdark
#'''

#[[plugins]]
#repo = 'joshdick/onedark.vim'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  au MyAutoCmd VimEnter * nested colorscheme onedark
#'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''
# tag
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1

nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

let g:vista_sidebar_width = 40
let g:vista_echo_cursor_strategy = 'both'
let g:vista_stay_on_open = 0
let g:vista_default_executive = 'coc'

"https://github.com/miiton/Cica/issues/45#issuecomment-505924698
" let g:vista_icon_indent = ["󳄀󳄂 ", "󳄁󳄂 "]
" let g:vista#renderer#icons = {
"            \ 'func':           "\Uff794",
"            \ 'function':       "\Uff794",
"            \ 'functions':      "\Uff794",
"            \ 'var':            "\Uff71b",
"            \ 'variable':       "\Uff71b",
"            \ 'variables':      "\Uff71b",
"            \ 'const':          "\Uff8ff",
"            \ 'constant':       "\Uff8ff",
"            \ 'method':         "\Uff6a6",
"            \ 'package':        "\Ufe612",
"            \ 'packages':       "\Ufe612",
"            \ 'enum':           "\Uff435",
"            \ 'enumerator':     "\Uff435",
"            \ 'module':         "\Uff668",
"            \ 'modules':        "\Uff668",
"            \ 'type':           "\Ufe22b",
"            \ 'typedef':        "\Ufe22b",
"            \ 'types':          "\Ufe22b",
"            \ 'field':          "\Uff93d",
"            \ 'fields':         "\Uff93d",
"            \ 'macro':          "\Uff8a3",
"            \ 'macros':         "\Uff8a3",
"            \ 'map':            "\Uffb44",
"            \ 'class':          "\Uff9a9",
"            \ 'augroup':        "\Uffb44",
"            \ 'struct':         "\Uffb44",
"            \ 'union':          "\Uffacd",
"            \ 'member':         "\Uff02b",
"            \ 'target':         "\Uff893",
"            \ 'property':       "\Uffab6",
"            \ 'interface':      "\Uffa52",
"            \ 'namespace':      "\Uff475",
"            \ 'subroutine':     "\Uff915",
"            \ 'implementation': "\Uff87a",
"            \ 'typeParameter':  "\Uff278",
"            \ 'default':        "\Uff29c"
"            \ }
'''
#[[plugins]]
#repo = 'nekottyo/tagbar'
#hook_add = '''
#autocmd VimEnter * nested :call tagbar#autoopen(1)
#autocmd BufWritePost *.rb !ripper-tags -R --exclude=vendor
#nmap <F8> :TagbarToggle<CR>
#
#if executable('ripper-tags')
#  let g:tagbar_type_ruby = {
#    \ 'kinds'    : ['m:modules',
#            \ 'c:classes',
#            \ 'C:constants',
#            \ 'F:singleton methods',
#            \ 'f:methods',
#            \ 'a:aliases'],
#    \ 'kind2scope' : { 'c' : 'class',
#             \ 'm' : 'class' },
#    \ 'scope2kind' : { 'class' : 'c' },
#    \ 'ctagsbin'   : 'ripper-tags',
#    \ 'ctagsargs'  : ['--exclude=vendor', '-f', '-']
#    \ }
#endif
#'''

[[plugins]]
repo = "ozelentok/denite-gtags"
hook_add = '''
nnoremap ta :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
nnoremap td :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
nnoremap tr :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
nnoremap tg :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
nnoremap tt :Denite -buffer-name=gtags_completion gtags_completion<cr>
nnoremap tf :Denite -buffer-name=gtags_file gtags_file<cr>
nnoremap tp :Denite -buffer-name=gtags_path gtags_path<cr>
'''

# コメントアウト
[[plugins]]
repo = "tyru/caw.vim"
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'

[[plugins]]
repo = 'chr4/nginx.vim'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'edkolev/tmuxline.vim'

# show diff
[[plugins]]
repo = 'airblade/vim-gitgutter'

# vim git
[[plugins]]
repo = 'cohama/agit.vim'

# html5 highlight
[[plugins]]
repo = 'othree/html5.vim'

# 辞書
[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'
depends_on = 'vim-ref'

[[plugins]]
repo = 'nelstrom/vim-visual-star-search'

# 記号を揃えたり出来る
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
	let g:rainbow_conf = {
	\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\	'operators': '_,_',
	\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	\	'separately': {
	\		'*': {},
	\		'tex': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	\		},
	\		'lisp': {
	\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	\		},
	\		'vim': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	\		},
	\		'html': {
	\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	\		},
	\		'css': 0,
	\	}
	\}
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
depends_on = ['incsearch.vim', 'incsearch-easymotion.vim', 'incsearch-fuzzy.vim']
hook_add = '''
let g:EasyMotion_do_mapping = 0

" s{char}{char} to move to {char}{char}
nmap f <Plug>(easymotion-overwin-f2)

" Move to line
map fL <Plug>(easymotion-bd-jk)
nmap fL <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-wl)
nmap <Leader>w <Plug>(easymotion-overwin-w)

function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \   "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
'''

[[plugins]]
repo = 'blueyed/vim-diminactive'
hook_add = '''
let g:diminactive_enable_focus = 1
'''

[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']
highlight ExtraWhitespace ctermbg=red
'''

[[plugins]]
repo = 'simeji/winresizer'


[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = ['open-browser.vim']

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = '~/.fzf'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {
      'lua',
      'ruby',
      'toml',
      'c_sharp',
      'vue',
    }
  },
  ensure_installed = 'all'
}
EOF
'''
